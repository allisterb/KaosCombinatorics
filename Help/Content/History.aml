<?xml version="1.0" encoding="utf-8"?>
<topic id="378c61fc-81bd-4a4b-bc4d-93a809330c60" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction></introduction>

    <section>
      <title>KwCombinatorics version 1.2 (2009-03-03)</title>
      <content>
        <list class="bullet">
          <listItem>Implements generic IEquatable interface.</listItem>
          <listItem>Implements proper null tests for comparison operators.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCombinatorics version 1.3 (2012-01-05)</title>
      <content>
        <list class="bullet">
          <listItem>Updates build environment to Visual Studio 2010.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCombinatorics version 1.4 (2012-03-23)</title>
      <content>
        <list class="bullet">
          <listItem>Adds increment, decrement operators for all classes.</listItem>
          <listItem>Fixes bugs on empty sequences.</listItem>
          <listItem>Renames many parameters.</listItem>
          <listItem>Adds minor optimizations.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCombinatorics version 2.2 (2012-04-01)</title>
      <content>
        <list class="bullet">
          <listItem>Adds Multicombination.GetRowsForPicks (startPicks, stopPicks).</listItem>
          <listItem>Adds CopyTo (array) to all combinatorics.</listItem>
          <listItem>Removes Multicombination.GetRows (picks, startRank).</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCombinatorics version 2.3 (2012-04-17)</title>
      <content>
        <list class="bullet">
          <listItem>Adds Permutation.Backtrack method.</listItem>
          <listItem>Multicombination ranking constructor accepts unsorted data.</listItem>
          <listItem>Combination ranking constructor accepts unsorted data.</listItem>
          <listItem>Fixes numeric overflow bug in Combination.Rank setter.</listItem>
          <listItem>Fixes missing numeric overflow checks in Product constructors.</listItem>
          <listItem>Fixes missing bounds checks in Product ranking constructor.</listItem>
          <listItem>Removes increment and decrement operators.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCombinatorics version 2.4 (2012-07-01)</title>
      <content>
        <list class="bullet">
          <listItem>Optimizes Combination.Rank setter.</listItem>
          <listItem>>Optimizes Multicombination.Rank setter.</listItem>
          <listItem>Adds methods Combinatoric.BinomialCoefficient, Combinatoric.Factorial.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCombinatorics version 4.0 (2012-11-14)</title>
      <content>
        <para>
          This release makes several changes to the Permutation class to add support for plain changes.
          There are also several breaking changes to improve API readability.
        </para>
        <list class="bullet">
          <listItem>Adds Permutation.Choices property to support k-permutations.</listItem>
          <listItem>Adds Permutation constructors to support k-permutations.</listItem>
          <listItem>Adds property Permutation.PlainChange.</listItem>
          <listItem>Adds property Permutation.Swaps.</listItem>
          <listItem>Adds method Permutation.GetRowsForAllPicks.</listItem>
          <listItem>Adds method Permutation.GetRowsOfPlainChanges.</listItem>
          <listItem>Renames all Height properties to RowCount.</listItem>
          <listItem>Renames Permutation.Width to Picks.</listItem>
          <listItem>Renames Permutation.MaxWidth to MaxChoices.</listItem>
          <listItem>Renames Permutation.GetRowsForAllWidths to GetRowsForAllChoices.</listItem>
          <listItem>Removes Permutation (int, long) constructor.</listItem>
          <listItem>Removes ICloneable base class and Clone methods from all combinatorics.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KaosCombinatorics version 5.0 (2017-04-14)</title>
      <content>
        <para>
          This release updates tooling to 2017.
          The new .NET Standard has been embraced for compatibility and future-proofing.
          Development now requires Visual Studio 2017 with the repository changed to Git.
          Binary now hosted at NuGet.org.
        </para>
        <list class="bullet">
          <listItem>Renames namespace from Kw to Kaos.</listItem>
          <listItem>Changes binary to .NET Standard 1.0 multitargeted to .NET 3.5, .NET 4.0.</listItem>
          <listItem>Updates build environment to Visual Studio 2017.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KaosCombinatorics version Next (2019-??-??)</title>
      <content>
        <para><legacyBold><legacyItalic>Summary</legacyItalic></legacyBold></para>
        <list class="bullet">
          <listItem>Optimizes <codeInline>Permutation</codeInline> class for speed and allocations.</listItem>
          <listItem>Changes <codeInline>Permutation</codeInline> comparisons to include the <codeInline>Choices</codeInline> property.</listItem>
          <listItem>Changes iterator behavior to produce consistent operand side effects.</listItem>
          <listItem>Changes thrown exceptions.</listItem>
        </list>
        <para><legacyBold><legacyItalic>Details</legacyItalic></legacyBold></para>
        <para><legacyBold>Optimize <codeInline>Permutation</codeInline> class for speed and allocations</legacyBold></para>
        <para>
          The <codeInline>Permutation</codeInline> class has seen the elimination of some temporary memory allocations in constructors taking <codeInline>int[]</codeInline>, the <codeInline>Rank</codeInline> setter, and backtracking.
          This change also comes with slight performance improvements.
        </para>
        <para><legacyBold>Change <codeInline>Permutation</codeInline> comparisons to include the <codeInline>Choices</codeInline> property</legacyBold></para>
        <para>
          Previously, comparison of permutations did not compare the <codeInline>Choices</codeInline> property as in this snippet:
        </para>
        <code language="cs">
          Console.WriteLine (new Permutation(4,3,0) == new Permutation(5,3,0));
          /* Output: true */
        </code>
        <para>
          This issue has been fixed and this example now correctly returns <codeInline>false</codeInline>.
        </para>
        <para><legacyBold>Update behavior of iterators to produce consistent operand side effects</legacyBold></para>
        <para>
          Previous versions of iterators produced inconsistent side affects to their operands.
          New behavior is to synchronize the operand to the values yielded and restore their operand to its original state after the iteration is complete.
        </para>
        <para>All iterators are affected:</para>
        <list class="bullet">
          <listItem><codeInline>Combination.GetRows</codeInline>, <codeInline>Combination.GetRowsForAllPicks</codeInline></listItem>
          <listItem><codeInline>Multicombination.GetRows</codeInline>, <codeInline>Multicombination.GetRowsForPicks</codeInline></listItem>
          <listItem><codeInline>Permutation.GetRows</codeInline>, <codeInline>Permutation.GetRowsForAllChoices</codeInline>, <codeInline>Permutation.GetRowsForAllPicks</codeInline>, <codeInline>Permutation.GetRowsOfPlainChanges</codeInline></listItem>
          <listItem><codeInline>Product.GetRows</codeInline></listItem>
        </list>
        <para>There is no impact for the typical scenario where the operand is not directly accessible as in this snippet:</para>
        <code language="cs">
          foreach (var cn in new Combination (choices:3, picks:2).GetRowsForAllPicks())
              Console.WriteLine (cn);

          /* Output:

          { 0 }
          { 1 }
          { 2 }
          { 0, 1 }
          { 0, 2 }
          { 1, 2 }

          */
        </code>
        <para>This change only impacts the atypical scenario where the operand is accessible independent of the yielded result such as in this snippet:</para>
        <code language="cs">
          var cn0 = new Combination (choices:3, picks:2);
          foreach (var cn in cn0.GetRowsForAllPicks())
              Console.WriteLine ($"cn={cn} cn0={cn0}");
          Console.WriteLine ($"After complete, cn0={cn0}");

          /* Output:

          cn={ 0 } cn0={ 0 }
          cn={ 1 } cn0={ 1 }
          cn={ 2 } cn0={ 2 }
          cn={ 0, 1 } cn0={ 0, 1 }
          cn={ 0, 2 } cn0={ 0, 2 }
          cn={ 1, 2 } cn0={ 1, 2 }
          After complete, cn0={ 0, 1 }

          */
        </code>
        <para><legacyBold>Change thrown exceptions</legacyBold></para>
        <para>
          Minor changes have been made to exception throwing in:
        </para>
        <list class="bullet">
          <listItem>Methods <codeInline>Permutation.Permute</codeInline>, <codeInline>Product.Permute</codeInline></listItem>
          <listItem>Constructors <codeInline>Permutation (int[])</codeInline>, <codeInline>Permutation (int[], int)</codeInline></listItem>
        </list>
        <para>
          Where <codeInline>Permute</codeInline> methods threw <codeInline>IndexOutOfRangeException</codeInline> they now throw <codeInline>ArgumentException</codeInline> with a fail fast approach.
        </para>
        <para>
          Where <codeInline>Permutation</codeInline> constructors taking an element array threw <codeInline>IndexOutOfRangeException</codeInline> they now throw <codeInline>ArgumentException</codeInline>.
        </para>
      </content>
    </section>

  <relatedTopics>
      <link xlink:href="0908d812-b502-4da7-a452-66e043c6bb70"/>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
